import React, { useContext, useEffect, useState } from 'react'
import { Dropdown } from 'carbon-components-react'
import SensorsTable from '../../components/SensorsTable'
import { useLazyQuery, useMutation } from '@apollo/client'
import SensorsMap from '../../components/SensorsMap'
import { sensorGroupDropdownItems } from './dropdownItems'

import { GET_SENSORS } from '../../graphql/queries'
import AppContext from '../../context/app'

import { SEND_SENSOR_REMOVE } from '../../graphql/mutations'
import { handleGraphQLError } from '../../graphql/error'

const processSensorData = (sensors) => {
  // Sort by isUserOwner
  return sensors
    .slice()
    .sort((a, b) => b.isUserOwner - a.isUserOwner)
    .map((s) => ({
      ...s,
      statusColor: (() => {
        if (!s.lastCheckin) {
          return 'yellow'
        }

        const secondsAgo =
          Math.floor(Date.now() / 1000) -
          Math.floor(new Date(s.lastCheckin) / 1000)

        if (secondsAgo > 604800) {
          return 'yellow'
        }

        return 'green'
      })(),
    }))
}

const Sensors = ({ history }) => {
  const { addToast } = useContext(AppContext)
  const [execQuery, { data, loading }] = useLazyQuery(GET_SENSORS, {
    errorPolicy: 'all',
    // TODO
    onError() {
      addToast({
        kind: 'warning',
        caption:
          'There were errors generated by the sensor query that may affect the display of relevant data. If this is a recurring warning, consider opening an issue.',
        title: 'Sensor Data Loaded with Error(s)',
      })
    },
  })

  const [pageSize, setPageSize] = useState(5)
  const [page, setPage] = useState(1)
  const [sensors, setSensors] = useState([])
  const [currentlyVisibleSensors, setCurrentlyVisibleSensors] = useState([])

  const [shouldShowSideMenu, setShouldShowSideMenu] = useState(false)
  const [shouldShowRemoveMenu, setShouldShowRemoveMenu] = useState(false)
  const [displayedSensor, setDisplayedSensor] = useState({})
  const [removeSensorLoading, setRemoveSensorLoading] = useState(false)
  const [currentHoveredSensor, setCurrentHoveredSensor] = useState()

  const [sendRemoveSensor] = useMutation(SEND_SENSOR_REMOVE)

  useEffect(() => {
    execQuery()
  }, [execQuery])

  useEffect(() => {
    if (data && data.sensors) {
      setSensors(processSensorData(data.sensors))
    }
  }, [data])

  useEffect(() => {
    setCurrentlyVisibleSensors(
      sensors.slice((page - 1) * pageSize, page * pageSize)
    )
  }, [page, pageSize, sensors])

  const onSensorHover = (index) => {
    setCurrentHoveredSensor(index)
  }

  const onModify = (sensor) => {
    setShouldShowSideMenu(true)
    setDisplayedSensor(sensor)
  }

  const onRemove = (sensor) => {
    setShouldShowRemoveMenu(true)
    setDisplayedSensor(sensor)
  }

  const removeSensor = () => {
    setRemoveSensorLoading(true)

    sendRemoveSensor({ variables: { sensorId: displayedSensor.id } })
      .then(() => {
        setRemoveSensorLoading(false)
        setShouldShowRemoveMenu(false)

        setSensors(() => {
          return sensors.filter((sensor) => sensor.id !== displayedSensor.id)
        })
      })
      .catch((e) => {
        return handleGraphQLError(e)
      })
  }

  const onPaginationChange = (paginationInfo) => {
    setPage(paginationInfo.page)
    setPageSize(paginationInfo.pageSize)
  }

  const setFilter = (e) => {
    if (e.selectedItem.id === 'my-sensors') {
      setSensors(sensors.filter((sensor) => sensor.isUserOwner))
    } else {
      setSensors(processSensorData(data.sensors))
    }
  }

  return (
    <div className="sensors-page">
      <p className="title" tabIndex={0}>
        Sensors
      </p>
      <Dropdown
        id="sensor-group-dropdown"
        className="sensor-group-dropdown"
        label={sensorGroupDropdownItems[0].text}
        itemToString={(item) => (item ? item.text : '')}
        items={sensorGroupDropdownItems}
        onChange={setFilter}
      />

      <div className="sensors-map__container">
        <SensorsMap
          sensors={sensors}
          setDisplayedSensor={setDisplayedSensor}
          setShouldShowSideMenu={setShouldShowSideMenu}
          onSensorHover={onSensorHover}
          currentHoveredSensor={currentHoveredSensor}
        />
      </div>

      <div className="sensors-table__container">
        <SensorsTable
          loading={loading}
          history={history}
          sensors={sensors}
          onSensorHover={onSensorHover}
          currentHoveredSensor={currentHoveredSensor}
          onPaginationChange={onPaginationChange}
          page={page}
          pageSize={pageSize}
          currentlyVisibleSensors={currentlyVisibleSensors}
          setSensors={setSensors}
          shouldShowSideMenu={shouldShowSideMenu}
          shouldShowRemoveMenu={shouldShowRemoveMenu}
          removeSensorLoading={removeSensorLoading}
          displayedSensor={displayedSensor}
          setDisplayedSensor={setDisplayedSensor}
          setShouldShowSideMenu={setShouldShowSideMenu}
          setShouldShowRemoveMenu={setShouldShowRemoveMenu}
          removeSensor={removeSensor}
          onModify={onModify}
          onRemove={onRemove}
        />
      </div>
    </div>
  )
}

export default Sensors
